STEPS_ORDER
	__ARBRE__;
	default_step;
	initialization;
	propagate_effect_S;
	propagate_effect_required;
	propagate_leaves;
	tops;
GROUP_NAMES
	V3_simu_group;

OBJECT OPTIONS IS_A GLOBAL_TYPE;
	CONSTANT
	  trimming
		DOMAIN BOOLEAN
		= TRUE;
	  trimming_option
		DOMAIN 'according_to_article' 'maximum'
		= 'maximum';
	  repairable_system
		DOMAIN BOOLEAN
		= FALSE;

OBJECT UE_1 IS_A undes_event;
	INTERFACE
	  sons
		= crash;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'always_true';
	  force_relevant_events
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  to_be_taken_into_account
		DOMAIN BOOLEAN
		= TRUE;
	INTERACTION
	  xx4
		GROUP V3_simu_group
		STEP propagate_effect_required
		THEN relevant_evt OF UE_1 <-- TRUE;
	  xx5
		GROUP V3_simu_group
		STEP propagate_leaves
		THEN already_S OF UE_1 <-- S OF UE_1;
	  xx34
		GROUP V3_simu_group
		STEP propagate_effect_S
		IF S OF crash
		THEN S OF UE_1 <-- TRUE;

OBJECT ascent IS_A phase_leaf;
	INTERFACE
	  fathers
		= crash_during_ascent;
	  triggers
		= flight tank1_empty tank2_empty;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  Dist_kind
		DOMAIN 'exponential' 'constant_time'
		= 'exponential';
	  duration
		DOMAIN REAL
		= 0.1666667;
	(*FAILURE*)
	ATTRIBUTE
	  in_progress
		LABEL "Phase %OBJECT in progress"
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  already_required
		DOMAIN BOOLEAN
		= FALSE;
	  start_phase
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  xx3
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF NOT required OF crash_during_ascent
		THEN required OF ascent <-- FALSE;
	  xx4
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF crash_during_ascent AND (NOT S OF
		  crash_during_ascent)) OR (((relevant_evt OF flight AND (NOT
		  S OF flight)) OR (relevant_evt OF tank1_empty AND (NOT S OF
		  tank1_empty))) OR (relevant_evt OF tank2_empty AND (NOT S OF
		  tank2_empty)))
		THEN relevant_evt OF ascent <-- TRUE;
	  xx5
		GROUP V3_simu_group
		STEP propagate_leaves
		THEN already_S OF ascent <-- S OF ascent;
	  xx44
		GROUP V3_simu_group
		STEP initialization
		THEN S OF ascent <-- in_progress OF ascent;
	  xx45
		GROUP V3_simu_group
		STEP propagate_leaves
		IF ((NOT in_progress OF ascent) AND (NOT required OF ascent))
		  AND already_required OF ascent
		THEN start_phase OF ascent <-- TRUE;
	  xx46
		GROUP V3_simu_group
		STEP tops
		THEN already_required OF ascent <-- required OF ascent;
	OCCURRENCE
	  xx43_a
		GROUP V3_simu_group
		IF in_progress OF ascent
		MAY_OCCUR
		  TRANSITION end
		  LABEL "End of phase %OBJECT"
		  DIST EXP (6)
		  INDUCING in_progress OF ascent <-- FALSE;
	  xx47
		GROUP V3_simu_group
		IF start_phase OF ascent
		MAY_OCCUR
		  TRANSITION start
		  LABEL "start of phase %OBJECT"
		  DIST INS (1)
		  INDUCING in_progress OF ascent <-- TRUE,
			start_phase OF ascent <-- FALSE;

OBJECT backup_failure1 IS_A or_gate;
	INTERFACE
	  sons
		= switch1to2_failure tank2_empty;
	  fathers
		= no_fuel_for_engine1;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  xx3
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF NOT required OF no_fuel_for_engine1
		THEN required OF backup_failure1 <-- FALSE;
	  xx4
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF relevant_evt OF no_fuel_for_engine1 AND (NOT S OF
		  no_fuel_for_engine1)
		THEN relevant_evt OF backup_failure1 <-- TRUE;
	  xx5
		GROUP V3_simu_group
		STEP propagate_leaves
		THEN already_S OF backup_failure1 <-- S OF backup_failure1;
	  xx29
		GROUP V3_simu_group
		STEP propagate_effect_S
		IF S OF switch1to2_failure OR S OF tank2_empty
		THEN S OF backup_failure1 <-- TRUE;

OBJECT backup_failure2 IS_A or_gate;
	INTERFACE
	  sons
		= switch2to1_failure tank1_empty;
	  fathers
		= no_fuel_for_engine2;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  xx3
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF NOT required OF no_fuel_for_engine2
		THEN required OF backup_failure2 <-- FALSE;
	  xx4
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF relevant_evt OF no_fuel_for_engine2 AND (NOT S OF
		  no_fuel_for_engine2)
		THEN relevant_evt OF backup_failure2 <-- TRUE;
	  xx5
		GROUP V3_simu_group
		STEP propagate_leaves
		THEN already_S OF backup_failure2 <-- S OF backup_failure2;
	  xx29
		GROUP V3_simu_group
		STEP propagate_effect_S
		IF S OF switch2to1_failure OR S OF tank1_empty
		THEN S OF backup_failure2 <-- TRUE;

OBJECT crash IS_A or_gate;
	INTERFACE
	  sons
		= crash_during_ascent crash_during_flight;
	  fathers
		= UE_1;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  xx3
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF NOT required OF UE_1
		THEN required OF crash <-- FALSE;
	  xx4
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF relevant_evt OF UE_1 AND (NOT S OF UE_1)
		THEN relevant_evt OF crash <-- TRUE;
	  xx5
		GROUP V3_simu_group
		STEP propagate_leaves
		THEN already_S OF crash <-- S OF crash;
	  xx29
		GROUP V3_simu_group
		STEP propagate_effect_S
		IF S OF crash_during_ascent OR S OF crash_during_flight
		THEN S OF crash <-- TRUE;

OBJECT crash_during_ascent IS_A and_gate;
	INTERFACE
	  sons
		= ascent loss_of_any_engine;
	  fathers
		= crash;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  xx3
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF NOT required OF crash
		THEN required OF crash_during_ascent <-- FALSE;
	  xx4
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF relevant_evt OF crash AND (NOT S OF crash)
		THEN relevant_evt OF crash_during_ascent <-- TRUE;
	  xx5
		GROUP V3_simu_group
		STEP propagate_leaves
		THEN already_S OF crash_during_ascent <-- S OF
		  crash_during_ascent;
	  xx28
		GROUP V3_simu_group
		STEP propagate_effect_S
		IF S OF ascent AND S OF loss_of_any_engine
		THEN S OF crash_during_ascent <-- TRUE;

OBJECT crash_during_flight IS_A and_gate;
	INTERFACE
	  sons
		= flight loss_of_both_engines;
	  fathers
		= crash;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  xx3
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF NOT required OF crash
		THEN required OF crash_during_flight <-- FALSE;
	  xx4
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF relevant_evt OF crash AND (NOT S OF crash)
		THEN relevant_evt OF crash_during_flight <-- TRUE;
	  xx5
		GROUP V3_simu_group
		STEP propagate_leaves
		THEN already_S OF crash_during_flight <-- S OF
		  crash_during_flight;
	  xx28
		GROUP V3_simu_group
		STEP propagate_effect_S
		IF S OF flight AND S OF loss_of_both_engines
		THEN S OF crash_during_flight <-- TRUE;

OBJECT engine1 IS_A f_leaf;
	INTERFACE
	  fathers
		= engine1_lost;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  mu
		DOMAIN REAL
		= 0.1;
	  lambda
		DOMAIN REAL
		= 0.0001;
	  failF_FROZEN
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  failF
		LABEL "failure in operation %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  xx3
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF NOT required OF engine1_lost
		THEN required OF engine1 <-- FALSE;
	  xx4
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF relevant_evt OF engine1_lost AND (NOT S OF engine1_lost)
		THEN relevant_evt OF engine1 <-- TRUE;
	  xx5
		GROUP V3_simu_group
		STEP propagate_leaves
		THEN already_S OF engine1 <-- S OF engine1;
	  xx6
		GROUP V3_simu_group
		STEP initialization
		IF failF OF engine1 = TRUE
		THEN S OF engine1 <-- TRUE;
	OCCURRENCE
	  xx10
		GROUP V3_simu_group
		IF (failF OF engine1 = FALSE) AND (required OF engine1 AND
		  relevant_evt OF engine1)
		MAY_OCCUR
		  FAULT failF
		  LABEL "failure in operation %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING failF OF engine1 <-- TRUE;

OBJECT engine1_lost IS_A or_gate;
	INTERFACE
	  sons
		= engine1 no_fuel_for_engine1;
	  fathers
		= loss_of_any_engine loss_of_both_engines;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  xx3
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF (NOT required OF loss_of_any_engine) AND (NOT required OF
		  loss_of_both_engines)
		THEN required OF engine1_lost <-- FALSE;
	  xx4
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF loss_of_any_engine AND (NOT S OF
		  loss_of_any_engine)) OR (relevant_evt OF
		  loss_of_both_engines AND (NOT S OF loss_of_both_engines))
		THEN relevant_evt OF engine1_lost <-- TRUE;
	  xx5
		GROUP V3_simu_group
		STEP propagate_leaves
		THEN already_S OF engine1_lost <-- S OF engine1_lost;
	  xx29
		GROUP V3_simu_group
		STEP propagate_effect_S
		IF S OF engine1 OR S OF no_fuel_for_engine1
		THEN S OF engine1_lost <-- TRUE;

OBJECT engine2 IS_A f_leaf;
	INTERFACE
	  fathers
		= engine2_lost;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  mu
		DOMAIN REAL
		= 0.1;
	  lambda
		DOMAIN REAL
		= 0.0001;
	  failF_FROZEN
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  failF
		LABEL "failure in operation %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  xx3
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF NOT required OF engine2_lost
		THEN required OF engine2 <-- FALSE;
	  xx4
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF relevant_evt OF engine2_lost AND (NOT S OF engine2_lost)
		THEN relevant_evt OF engine2 <-- TRUE;
	  xx5
		GROUP V3_simu_group
		STEP propagate_leaves
		THEN already_S OF engine2 <-- S OF engine2;
	  xx6
		GROUP V3_simu_group
		STEP initialization
		IF failF OF engine2 = TRUE
		THEN S OF engine2 <-- TRUE;
	OCCURRENCE
	  xx10
		GROUP V3_simu_group
		IF (failF OF engine2 = FALSE) AND (required OF engine2 AND
		  relevant_evt OF engine2)
		MAY_OCCUR
		  FAULT failF
		  LABEL "failure in operation %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING failF OF engine2 <-- TRUE;

OBJECT engine2_lost IS_A or_gate;
	INTERFACE
	  sons
		= engine2 no_fuel_for_engine2;
	  fathers
		= loss_of_any_engine loss_of_both_engines;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  xx3
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF (NOT required OF loss_of_any_engine) AND (NOT required OF
		  loss_of_both_engines)
		THEN required OF engine2_lost <-- FALSE;
	  xx4
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF loss_of_any_engine AND (NOT S OF
		  loss_of_any_engine)) OR (relevant_evt OF
		  loss_of_both_engines AND (NOT S OF loss_of_both_engines))
		THEN relevant_evt OF engine2_lost <-- TRUE;
	  xx5
		GROUP V3_simu_group
		STEP propagate_leaves
		THEN already_S OF engine2_lost <-- S OF engine2_lost;
	  xx29
		GROUP V3_simu_group
		STEP propagate_effect_S
		IF S OF engine2 OR S OF no_fuel_for_engine2
		THEN S OF engine2_lost <-- TRUE;

OBJECT flight IS_A phase_leaf;
	INTERFACE
	  fathers
		= crash_during_flight;
	  triggered_by
		= ascent;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  Dist_kind
		DOMAIN 'exponential' 'constant_time'
		= 'exponential';
	  duration
		DOMAIN REAL
		= 10;
	(*FAILURE*)
	ATTRIBUTE
	  in_progress
		LABEL "Phase %OBJECT in progress"
		DOMAIN BOOLEAN
		= FALSE;
	ATTRIBUTE
	  already_required
		DOMAIN BOOLEAN
		= FALSE;
	  start_phase
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  xx3
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF (NOT required OF crash_during_flight) OR (NOT S OF ascent)
		THEN required OF flight <-- FALSE;
	  xx4
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF relevant_evt OF crash_during_flight AND (NOT S OF
		  crash_during_flight)
		THEN relevant_evt OF flight <-- TRUE;
	  xx5
		GROUP V3_simu_group
		STEP propagate_leaves
		THEN already_S OF flight <-- S OF flight;
	  xx44
		GROUP V3_simu_group
		STEP initialization
		THEN S OF flight <-- in_progress OF flight;
	  xx45
		GROUP V3_simu_group
		STEP propagate_leaves
		IF ((NOT in_progress OF flight) AND (NOT required OF flight))
		  AND already_required OF flight
		THEN start_phase OF flight <-- TRUE;
	  xx46
		GROUP V3_simu_group
		STEP tops
		THEN already_required OF flight <-- required OF flight;
	OCCURRENCE
	  xx43_a
		GROUP V3_simu_group
		IF in_progress OF flight
		MAY_OCCUR
		  TRANSITION end
		  LABEL "End of phase %OBJECT"
		  DIST EXP (0.1)
		  INDUCING in_progress OF flight <-- FALSE;
	  xx47
		GROUP V3_simu_group
		IF start_phase OF flight
		MAY_OCCUR
		  TRANSITION start
		  LABEL "start of phase %OBJECT"
		  DIST INS (1)
		  INDUCING in_progress OF flight <-- TRUE,
			start_phase OF flight <-- FALSE;

OBJECT logic_1 IS_A logic_link;

OBJECT logic_10 IS_A logic_link;

OBJECT logic_11 IS_A logic_link;

OBJECT logic_12 IS_A logic_link;

OBJECT logic_13 IS_A logic_link;

OBJECT logic_14 IS_A logic_link;

OBJECT logic_15 IS_A logic_link;

OBJECT logic_2 IS_A logic_link;

OBJECT logic_2_C1 IS_A logic_link;

OBJECT logic_3 IS_A logic_link;

OBJECT logic_3_C1 IS_A logic_link;

OBJECT logic_4_C2 IS_A logic_link;

OBJECT logic_4_C3 IS_A logic_link;

OBJECT logic_5 IS_A logic_link;

OBJECT logic_5_C1 IS_A logic_link;

OBJECT logic_6 IS_A logic_link;

OBJECT logic_6_C1 IS_A logic_link;

OBJECT logic_7 IS_A logic_link;

OBJECT logic_7_C1 IS_A logic_link;

OBJECT logic_8 IS_A logic_link;

OBJECT logic_8_C1 IS_A logic_link;

OBJECT logic_9 IS_A logic_link;

OBJECT logic_9_C1 IS_A logic_link;

OBJECT loss_of_any_engine IS_A or_gate;
	INTERFACE
	  sons
		= engine1_lost engine2_lost;
	  fathers
		= crash_during_ascent;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  xx3
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF NOT required OF crash_during_ascent
		THEN required OF loss_of_any_engine <-- FALSE;
	  xx4
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF relevant_evt OF crash_during_ascent AND (NOT S OF
		  crash_during_ascent)
		THEN relevant_evt OF loss_of_any_engine <-- TRUE;
	  xx5
		GROUP V3_simu_group
		STEP propagate_leaves
		THEN already_S OF loss_of_any_engine <-- S OF
		  loss_of_any_engine;
	  xx29
		GROUP V3_simu_group
		STEP propagate_effect_S
		IF S OF engine1_lost OR S OF engine2_lost
		THEN S OF loss_of_any_engine <-- TRUE;

OBJECT loss_of_both_engines IS_A and_gate;
	INTERFACE
	  sons
		= engine1_lost engine2_lost;
	  fathers
		= crash_during_flight;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  xx3
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF NOT required OF crash_during_flight
		THEN required OF loss_of_both_engines <-- FALSE;
	  xx4
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF relevant_evt OF crash_during_flight AND (NOT S OF
		  crash_during_flight)
		THEN relevant_evt OF loss_of_both_engines <-- TRUE;
	  xx5
		GROUP V3_simu_group
		STEP propagate_leaves
		THEN already_S OF loss_of_both_engines <-- S OF
		  loss_of_both_engines;
	  xx28
		GROUP V3_simu_group
		STEP propagate_effect_S
		IF S OF engine1_lost AND S OF engine2_lost
		THEN S OF loss_of_both_engines <-- TRUE;

OBJECT no_fuel_for_engine1 IS_A and_gate;
	INTERFACE
	  sons
		= backup_failure1 tank1_empty;
	  fathers
		= engine1_lost;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  xx3
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF NOT required OF engine1_lost
		THEN required OF no_fuel_for_engine1 <-- FALSE;
	  xx4
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF relevant_evt OF engine1_lost AND (NOT S OF engine1_lost)
		THEN relevant_evt OF no_fuel_for_engine1 <-- TRUE;
	  xx5
		GROUP V3_simu_group
		STEP propagate_leaves
		THEN already_S OF no_fuel_for_engine1 <-- S OF
		  no_fuel_for_engine1;
	  xx28
		GROUP V3_simu_group
		STEP propagate_effect_S
		IF S OF backup_failure1 AND S OF tank1_empty
		THEN S OF no_fuel_for_engine1 <-- TRUE;

OBJECT no_fuel_for_engine2 IS_A and_gate;
	INTERFACE
	  sons
		= backup_failure2 tank2_empty;
	  fathers
		= engine2_lost;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  xx3
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF NOT required OF engine2_lost
		THEN required OF no_fuel_for_engine2 <-- FALSE;
	  xx4
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF relevant_evt OF engine2_lost AND (NOT S OF engine2_lost)
		THEN relevant_evt OF no_fuel_for_engine2 <-- TRUE;
	  xx5
		GROUP V3_simu_group
		STEP propagate_leaves
		THEN already_S OF no_fuel_for_engine2 <-- S OF
		  no_fuel_for_engine2;
	  xx28
		GROUP V3_simu_group
		STEP propagate_effect_S
		IF S OF backup_failure2 AND S OF tank2_empty
		THEN S OF no_fuel_for_engine2 <-- TRUE;

OBJECT switch1to2_failure IS_A i_leaf;
	INTERFACE
	  fathers
		= backup_failure1;
	  triggered_by
		= tank1_empty;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  mu
		DOMAIN REAL
		= 0.1;
	  when_to_check
		DOMAIN 'not_req_to_req' 'req_to_not_req'
		= 'not_req_to_req';
	  gamma
		DOMAIN REAL
		= 0.01;
	  failI_FROZEN
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  failI
		LABEL "instantaneous failure %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	ATTRIBUTE
	  to_be_fired
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  already_standby
		DOMAIN BOOLEAN
		= FALSE;
	  already_required
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  xx3
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF (NOT required OF backup_failure1) OR (NOT S OF tank1_empty)
		THEN required OF switch1to2_failure <-- FALSE;
	  xx4
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF relevant_evt OF backup_failure1 AND (NOT S OF
		  backup_failure1)
		THEN relevant_evt OF switch1to2_failure <-- TRUE;
	  xx5
		GROUP V3_simu_group
		STEP propagate_leaves
		THEN already_S OF switch1to2_failure <-- S OF
		  switch1to2_failure;
	  xx6
		GROUP V3_simu_group
		STEP initialization
		IF failI OF switch1to2_failure = TRUE
		THEN S OF switch1to2_failure <-- TRUE;
	  xx20
		GROUP V3_simu_group
		STEP propagate_leaves
		IF (NOT required OF switch1to2_failure) AND ((NOT
		  already_standby OF switch1to2_failure) AND (NOT
		  already_required OF switch1to2_failure))
		THEN already_standby OF switch1to2_failure <-- TRUE;
	  xx22
		GROUP V3_simu_group
		STEP tops
		IF required OF switch1to2_failure AND already_standby OF
		  switch1to2_failure
		THEN to_be_fired OF switch1to2_failure <-- TRUE;
	OCCURRENCE
	  xx23
		GROUP V3_simu_group
		IF (failI OF switch1to2_failure = FALSE) AND (to_be_fired OF
		  switch1to2_failure AND relevant_evt OF switch1to2_failure)
		MAY_OCCUR
		  FAULT failI
		  LABEL "instantaneous failure %OBJECT"
		  DIST INS (0.01)
		  INDUCING failI OF switch1to2_failure <-- TRUE,
			already_standby OF switch1to2_failure <-- FALSE,
			already_required OF switch1to2_failure <-- FALSE
		OR_ELSE
		  TRANSITION good
		  DIST INS (0.99)
		  INDUCING already_standby OF switch1to2_failure <-- FALSE,
			already_required OF switch1to2_failure <-- FALSE;

OBJECT switch2to1_failure IS_A i_leaf;
	INTERFACE
	  fathers
		= backup_failure2;
	  triggered_by
		= tank2_empty;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  mu
		DOMAIN REAL
		= 0.1;
	  when_to_check
		DOMAIN 'not_req_to_req' 'req_to_not_req'
		= 'not_req_to_req';
	  gamma
		DOMAIN REAL
		= 0.01;
	  failI_FROZEN
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  failI
		LABEL "instantaneous failure %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	ATTRIBUTE
	  to_be_fired
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  already_standby
		DOMAIN BOOLEAN
		= FALSE;
	  already_required
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  xx3
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF (NOT required OF backup_failure2) OR (NOT S OF tank2_empty)
		THEN required OF switch2to1_failure <-- FALSE;
	  xx4
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF relevant_evt OF backup_failure2 AND (NOT S OF
		  backup_failure2)
		THEN relevant_evt OF switch2to1_failure <-- TRUE;
	  xx5
		GROUP V3_simu_group
		STEP propagate_leaves
		THEN already_S OF switch2to1_failure <-- S OF
		  switch2to1_failure;
	  xx6
		GROUP V3_simu_group
		STEP initialization
		IF failI OF switch2to1_failure = TRUE
		THEN S OF switch2to1_failure <-- TRUE;
	  xx20
		GROUP V3_simu_group
		STEP propagate_leaves
		IF (NOT required OF switch2to1_failure) AND ((NOT
		  already_standby OF switch2to1_failure) AND (NOT
		  already_required OF switch2to1_failure))
		THEN already_standby OF switch2to1_failure <-- TRUE;
	  xx22
		GROUP V3_simu_group
		STEP tops
		IF required OF switch2to1_failure AND already_standby OF
		  switch2to1_failure
		THEN to_be_fired OF switch2to1_failure <-- TRUE;
	OCCURRENCE
	  xx23
		GROUP V3_simu_group
		IF (failI OF switch2to1_failure = FALSE) AND (to_be_fired OF
		  switch2to1_failure AND relevant_evt OF switch2to1_failure)
		MAY_OCCUR
		  FAULT failI
		  LABEL "instantaneous failure %OBJECT"
		  DIST INS (0.01)
		  INDUCING failI OF switch2to1_failure <-- TRUE,
			already_standby OF switch2to1_failure <-- FALSE,
			already_required OF switch2to1_failure <-- FALSE
		OR_ELSE
		  TRANSITION good
		  DIST INS (0.99)
		  INDUCING already_standby OF switch2to1_failure <-- FALSE,
			already_required OF switch2to1_failure <-- FALSE;

OBJECT t_2 IS_A trigger_link;
	INTERFACE
	  target
		= flight;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_3 IS_A trigger_link;
	INTERFACE
	  target
		= switch1to2_failure;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_4 IS_A trigger_link;
	INTERFACE
	  target
		= switch2to1_failure;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_5 IS_A trigger_link;
	INTERFACE
	  target
		= tank1_empty;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_opp_trig';

OBJECT t_6 IS_A trigger_link;
	INTERFACE
	  target
		= tank2_empty;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_opp_trig';

OBJECT tank1_empty IS_A sf_leaf;
	INTERFACE
	  fathers
		= backup_failure2 no_fuel_for_engine1;
	  triggered_by
		= ascent;
	  triggers
		= switch1to2_failure;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_opp_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  mu
		DOMAIN REAL
		= 0.1;
	  lambda
		DOMAIN REAL
		= 0.0001;
	  standby_lambda
		DOMAIN REAL
		= 1e-05;
	  failF_FROZEN
		DOMAIN BOOLEAN
		= FALSE;
	  failS_FROZEN
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  failF
		LABEL "failure in operation %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	  failS
		LABEL "standby failure %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  xx3
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF ((NOT required OF backup_failure2) AND (NOT required OF
		  no_fuel_for_engine1)) OR S OF ascent
		THEN required OF tank1_empty <-- FALSE;
	  xx4
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF ((relevant_evt OF backup_failure2 AND (NOT S OF
		  backup_failure2)) OR (relevant_evt OF no_fuel_for_engine1
		  AND (NOT S OF no_fuel_for_engine1))) OR (relevant_evt OF
		  switch1to2_failure AND (NOT S OF switch1to2_failure))
		THEN relevant_evt OF tank1_empty <-- TRUE;
	  xx5
		GROUP V3_simu_group
		STEP propagate_leaves
		THEN already_S OF tank1_empty <-- S OF tank1_empty;
	  xx6
		GROUP V3_simu_group
		STEP initialization
		IF (failS OF tank1_empty = TRUE) OR (failF OF tank1_empty =
		  TRUE)
		THEN S OF tank1_empty <-- TRUE;
	OCCURRENCE
	  xx17
		GROUP V3_simu_group
		IF (failF OF tank1_empty = FALSE) AND ((required OF tank1_empty
		  AND relevant_evt OF tank1_empty) AND (NOT failS OF
		  tank1_empty))
		MAY_OCCUR
		  FAULT failF
		  LABEL "failure in operation %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING failF OF tank1_empty <-- TRUE;
	  xx18
		GROUP V3_simu_group
		IF (failS OF tank1_empty = FALSE) AND (((NOT required OF
		  tank1_empty) AND relevant_evt OF tank1_empty) AND (NOT failF
		  OF tank1_empty))
		MAY_OCCUR
		  FAULT failS
		  LABEL "standby failure %OBJECT"
		  DIST EXP (1e-05)
		  INDUCING failS OF tank1_empty <-- TRUE;

OBJECT tank2_empty IS_A sf_leaf;
	INTERFACE
	  fathers
		= backup_failure1 no_fuel_for_engine2;
	  triggered_by
		= ascent;
	  triggers
		= switch2to1_failure;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_opp_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  mu
		DOMAIN REAL
		= 0.1;
	  lambda
		DOMAIN REAL
		= 0.0001;
	  standby_lambda
		DOMAIN REAL
		= 1e-05;
	  failF_FROZEN
		DOMAIN BOOLEAN
		= FALSE;
	  failS_FROZEN
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  failF
		LABEL "failure in operation %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	  failS
		LABEL "standby failure %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  xx3
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF ((NOT required OF backup_failure1) AND (NOT required OF
		  no_fuel_for_engine2)) OR S OF ascent
		THEN required OF tank2_empty <-- FALSE;
	  xx4
		GROUP V3_simu_group
		STEP propagate_effect_required
		IF ((relevant_evt OF backup_failure1 AND (NOT S OF
		  backup_failure1)) OR (relevant_evt OF no_fuel_for_engine2
		  AND (NOT S OF no_fuel_for_engine2))) OR (relevant_evt OF
		  switch2to1_failure AND (NOT S OF switch2to1_failure))
		THEN relevant_evt OF tank2_empty <-- TRUE;
	  xx5
		GROUP V3_simu_group
		STEP propagate_leaves
		THEN already_S OF tank2_empty <-- S OF tank2_empty;
	  xx6
		GROUP V3_simu_group
		STEP initialization
		IF (failS OF tank2_empty = TRUE) OR (failF OF tank2_empty =
		  TRUE)
		THEN S OF tank2_empty <-- TRUE;
	OCCURRENCE
	  xx17
		GROUP V3_simu_group
		IF (failF OF tank2_empty = FALSE) AND ((required OF tank2_empty
		  AND relevant_evt OF tank2_empty) AND (NOT failS OF
		  tank2_empty))
		MAY_OCCUR
		  FAULT failF
		  LABEL "failure in operation %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING failF OF tank2_empty <-- TRUE;
	  xx18
		GROUP V3_simu_group
		IF (failS OF tank2_empty = FALSE) AND (((NOT required OF
		  tank2_empty) AND relevant_evt OF tank2_empty) AND (NOT failF
		  OF tank2_empty))
		MAY_OCCUR
		  FAULT failS
		  LABEL "standby failure %OBJECT"
		  DIST EXP (1e-05)
		  INDUCING failS OF tank2_empty <-- TRUE;

OBJECT __ARBRE__EIRM IS_A FIGARO;
	CONSTANT
	  Profil1
		DOMAIN BOOLEAN
		= TRUE;

